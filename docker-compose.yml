version: "3.8"

services:
  # MongoDB for session storage
  mongodb:
    image: mongo:7.0-jammy
    container_name: oauth-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-oauth_demo}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - oauth-network

  # Redis for session caching (optional)
  redis:
    image: redis:7.2-alpine
    container_name: oauth-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - oauth-network

  # Express API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: oauth-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_PORT: 3001
      API_URL: http://localhost:3001
      FRONTEND_URL: http://localhost:3000
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-key-change-this}
      MONGODB_URI: mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-oauth_demo}?authSource=admin
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - redis
    networks:
      - oauth-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: runner
    container_name: oauth-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - oauth-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: oauth-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api
    networks:
      - oauth-network

volumes:
  mongodb_data:
  redis_data:

networks:
  oauth-network:
    driver: bridge
